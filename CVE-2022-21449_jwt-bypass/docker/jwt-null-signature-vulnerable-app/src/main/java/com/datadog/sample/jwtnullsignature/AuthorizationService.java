package com.datadog.sample.jwtnullsignature;

import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.security.KeyPair;
import java.util.Base64;

@Service
public class AuthorizationService {


    final static Logger logger = LoggerFactory.getLogger(AuthorizationService.class);

    private final KeyPair keyPair;
    private final JwtParser jwtVerifier;


    public AuthorizationService() {
        // We generate a new set of signing keys at every run, because we don't care about them for the purposes of demonstrating the bypass
        this.keyPair = Keys.keyPairFor(SignatureAlgorithm.ES256);
        this.jwtVerifier = Jwts.parserBuilder().setSigningKey(keyPair.getPublic()).build();
        logger.info("Using private key: \n" + "-----BEGIN PRIVATE KEY-----\n" + Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded()) + "\n-----END PRIVATE KEY-----\n");
    }

    private boolean isValidJWT(String jwt) {
        try {
            jwtVerifier.parseClaimsJws(jwt);
            return true;
        } catch (JwtException e) {
            return false;
        }
    }

    public String getClaim(String jwt, String claim) throws UnauthorizedException {
        if (!isValidJWT(jwt)) {
            throw new UnauthorizedException();
        }
        return this.jwtVerifier.parseClaimsJws(jwt).getBody().get(claim, String.class);
    }

    public String getSubject(String jwt) throws UnauthorizedException {
        return getClaim(jwt, "sub");
    }
}
